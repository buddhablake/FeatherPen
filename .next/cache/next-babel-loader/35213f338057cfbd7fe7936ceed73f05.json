{"ast":null,"code":"// import dbConnect from '../../utils/dbConnect'\n// import Users from '../../models/user'\n// import Sessions from '../../models/session'\n// import { v4 as uuidv4 } from 'uuid'\n// import bcrypt from 'bcrypt'\n//\n// dbConnect()\n//\n// export default async ( req, res ) => {\n//   const { method, body } = req\n//   console.log('method');\n//   switch (method){\n//     case \"POST\":\n//       try {\n//         const user = await Users.findOne({email:body.email})\n//         const validPassword = await bcrypt.compare(body.password, user.password)\n//\n//         const session = await Sessions.create({userId: user._id, sessionId: uuidv4()})\n//           res.status(200).json({ success:true, authorization: session.sessionId })\n//       } catch(err) {\n//           res.status(400).json({ success: false, error: err.message})\n//       }\n//       break\n//       default:\n//         res.status(400).json({ success:false })\n//   }\n// }\nimport Users from \"../../models/user\";\nimport Sessions from \"../../models/session\";\nimport dbConnect from \"../../utils/dbConnect\";\nimport * as bcrypt from \"bcrypt\";\nimport { v4 as uuidv4 } from \"uuid\";\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    method,\n    body\n  } = req;\n\n  switch (method) {\n    case \"POST\":\n      try {\n        const user = await Users.findOne({\n          email: body.email\n        });\n        const validPass = await bcrypt.compare(body.password, user.password);\n        const session = await Sessions.create({\n          userId: user._id,\n          sessionId: uuidv4()\n        });\n        res.status(200).json({\n          success: true,\n          authorization: session.sessionId\n        });\n      } catch (e) {\n        res.status(400).json({\n          success: false,\n          error: e.message\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n  }\n});","map":{"version":3,"sources":["/Users/blakedouglass/Desktop/projects/Pair_Programming/FeatherPen/pages/api/login.js"],"names":["Users","Sessions","dbConnect","bcrypt","v4","uuidv4","req","res","method","body","user","findOne","email","validPass","compare","password","session","create","userId","_id","sessionId","status","json","success","authorization","e","error","message"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,mBAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAmBH,GAAzB;;AACA,UAAQE,MAAR;AACE,SAAK,MAAL;AACE,UAAI;AACF,cAAME,IAAI,GAAG,MAAMV,KAAK,CAACW,OAAN,CAAc;AAAEC,UAAAA,KAAK,EAAEH,IAAI,CAACG;AAAd,SAAd,CAAnB;AAEA,cAAMC,SAAS,GAAG,MAAMV,MAAM,CAACW,OAAP,CAAeL,IAAI,CAACM,QAApB,EAA8BL,IAAI,CAACK,QAAnC,CAAxB;AAEA,cAAMC,OAAO,GAAG,MAAMf,QAAQ,CAACgB,MAAT,CAAgB;AACpCC,UAAAA,MAAM,EAAER,IAAI,CAACS,GADuB;AAEpCC,UAAAA,SAAS,EAAEf,MAAM;AAFmB,SAAhB,CAAtB;AAKAE,QAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGC,IAFH,CAEQ;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,aAAa,EAAER,OAAO,CAACI;AAAxC,SAFR;AAGD,OAbD,CAaE,OAAOK,CAAP,EAAU;AACVlB,QAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,KAAX;AAAkBG,UAAAA,KAAK,EAAED,CAAC,CAACE;AAA3B,SAArB;AACD;;AACD;;AACF;AACEpB,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AApBJ;AAsBD,CAxBD","sourcesContent":["// import dbConnect from '../../utils/dbConnect'\n// import Users from '../../models/user'\n// import Sessions from '../../models/session'\n// import { v4 as uuidv4 } from 'uuid'\n// import bcrypt from 'bcrypt'\n//\n// dbConnect()\n//\n// export default async ( req, res ) => {\n//   const { method, body } = req\n//   console.log('method');\n//   switch (method){\n//     case \"POST\":\n//       try {\n//         const user = await Users.findOne({email:body.email})\n//         const validPassword = await bcrypt.compare(body.password, user.password)\n//\n//         const session = await Sessions.create({userId: user._id, sessionId: uuidv4()})\n//           res.status(200).json({ success:true, authorization: session.sessionId })\n//       } catch(err) {\n//           res.status(400).json({ success: false, error: err.message})\n//       }\n//       break\n//       default:\n//         res.status(400).json({ success:false })\n//   }\n// }\n\nimport Users from \"../../models/user\";\nimport Sessions from \"../../models/session\";\nimport dbConnect from \"../../utils/dbConnect\";\nimport * as bcrypt from \"bcrypt\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ndbConnect();\n\nexport default async (req, res) => {\n  const { method, body } = req;\n  switch (method) {\n    case \"POST\":\n      try {\n        const user = await Users.findOne({ email: body.email });\n\n        const validPass = await bcrypt.compare(body.password, user.password);\n\n        const session = await Sessions.create({\n          userId: user._id,\n          sessionId: uuidv4(),\n        });\n\n        res\n          .status(200)\n          .json({ success: true, authorization: session.sessionId });\n      } catch (e) {\n        res.status(400).json({ success: false, error: e.message });\n      }\n      break;\n    default:\n      res.status(400).json({ success: false });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}