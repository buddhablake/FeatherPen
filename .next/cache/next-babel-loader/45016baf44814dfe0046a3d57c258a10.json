{"ast":null,"code":"import dbConnect from '../../utils/dbConnect';\nimport Users from '../../models/user';\nimport Sessions from '../../models/session';\nimport { v4 as uuidv4 } from 'uuid';\nimport bcrypt from 'bcrypt';\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    method,\n    body\n  } = req;\n\n  switch (method) {\n    case \"POST\":\n      try {\n        //defining the level of encryption\n        const salt = await bcrypt.genSalt(10); // hashing the password\n\n        const hashedPassword = await bcrypt.hash(req.body.password, salt);\n        req.body.password = hashedPassword;\n        const user = await Users.create(body);\n        const session = await Sessions.create({\n          userId: user._id,\n          sessionId: uuidv4()\n        });\n        res.status(200).json({\n          success: true,\n          authorization: session.sessionId\n        });\n      } catch (err) {\n        res.status(400).json({\n          success: false,\n          err: err.message\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n  }\n});","map":{"version":3,"sources":["/Users/blakedouglass/Desktop/projects/Pair_Programming/FeatherPen/pages/api/register.js"],"names":["dbConnect","Users","Sessions","v4","uuidv4","bcrypt","req","res","method","body","salt","genSalt","hashedPassword","hash","password","user","create","session","userId","_id","sessionId","status","json","success","authorization","err","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEAL,SAAS;AAGT,gBAAe,OAAMM,GAAN,EAAWC,GAAX,KAAkB;AAC/B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAmBH,GAAzB;;AAEA,UAAQE,MAAR;AACE,SAAK,MAAL;AACF,UAAG;AAED;AACA,cAAME,IAAI,GAAG,MAAML,MAAM,CAACM,OAAP,CAAe,EAAf,CAAnB,CAHC,CAKD;;AACA,cAAMC,cAAc,GAAG,MAAMP,MAAM,CAACQ,IAAP,CAAYP,GAAG,CAACG,IAAJ,CAASK,QAArB,EAA+BJ,IAA/B,CAA7B;AACAJ,QAAAA,GAAG,CAACG,IAAJ,CAASK,QAAT,GAAoBF,cAApB;AAEA,cAAMG,IAAI,GAAG,MAAMd,KAAK,CAACe,MAAN,CAAaP,IAAb,CAAnB;AACA,cAAMQ,OAAO,GAAG,MAAMf,QAAQ,CAACc,MAAT,CAAgB;AAACE,UAAAA,MAAM,EAAEH,IAAI,CAACI,GAAd;AAAmBC,UAAAA,SAAS,EAAChB,MAAM;AAAnC,SAAhB,CAAtB;AACAG,QAAAA,GAAG,CACFc,MADD,CACQ,GADR,EAECC,IAFD,CAEM;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,aAAa,EAAEP,OAAO,CAACG;AAAxC,SAFN;AAID,OAfD,CAeE,OAAOK,GAAP,EAAW;AACTlB,QAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACrBC,UAAAA,OAAO,EAAC,KADa;AACNE,UAAAA,GAAG,EAACA,GAAG,CAACC;AADF,SAArB;AAEH;;AAEG;;AACF;AACEnB,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACfC,QAAAA,OAAO,EAAC;AADO,OAArB;AAxBJ;AA6BD,CAhCD","sourcesContent":["import dbConnect from '../../utils/dbConnect'\nimport Users from '../../models/user'\nimport Sessions from '../../models/session'\nimport { v4 as uuidv4 } from 'uuid'\nimport bcrypt from 'bcrypt'\n\ndbConnect()\n\n\nexport default async(req, res)=> {\n  const { method, body } = req\n\n  switch (method) {\n    case \"POST\":\n  try{\n\n    //defining the level of encryption\n    const salt = await bcrypt.genSalt(10)\n\n    // hashing the password\n    const hashedPassword = await bcrypt.hash(req.body.password, salt)\n    req.body.password = hashedPassword\n\n    const user = await Users.create(body)\n    const session = await Sessions.create({userId: user._id, sessionId:uuidv4()})\n    res\n    .status(200)\n    .json({ success: true, authorization: session.sessionId})\n    \n  } catch (err){\n      res.status(400).json({\n      success:false, err:err.message})\n  }\n\n      break;\n    default:\n      res.status(400).json({\n            success:false\n      })\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}